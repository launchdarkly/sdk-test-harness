---
name: clause kind matching

constants:
  IS_MATCH:
    value: true
    variationIndex: 0
    reason: { kind: "RULE_MATCH", ruleIndex: 0, ruleId: "ruleid" }
  IS_NOT_MATCH:
    value: false
    variationIndex: 1
    reason: { kind: "FALLTHROUGH" }

parameters:
  - NAME: multi-kind context with user, clause has default kind, match
    CONTEXT: { kind: "multi", user: { key: "a" }, other: { key: "b" } }
    CLAUSE: { attribute: "key", op: "in", values: ["a"] }
    EXPECT: <IS_MATCH>

  - NAME: multi-kind context with user, clause has default kind, no match
    CONTEXT: { kind: "multi", user: { key: "a" }, other: { key: "b" } }
    CLAUSE: { attribute: "key", op: "in", values: ["b"] }
    EXPECT: <IS_NOT_MATCH>

  - NAME: multi-kind context, clause specifies existing kind, match
    CONTEXT: { kind: "multi", user: { key: "a" }, other: { key: "b" } }
    CLAUSE: { contextKind: "other", attribute: "key", op: "in", values: ["b"] }
    EXPECT: <IS_MATCH>

  - NAME: multi-kind context, clause specifies existing kind, no match
    CONTEXT: { kind: "multi", user: { key: "a" }, other: { key: "b" } }
    CLAUSE: { contextKind: "other", attribute: "key", op: "in", values: ["a"] }
    EXPECT: <IS_NOT_MATCH>

  - NAME: kind match for single-kind context
    CONTEXT: { kind: "user", key: "a" }
    CLAUSE: { attribute: "kind", op: "in", values: ["user"] }
    EXPECT: <IS_MATCH>

  - NAME: kind non-match for single-kind context
    CONTEXT: { kind: "user", key: "a" }
    CLAUSE: { attribute: "kind", op: "in", values: ["org"] }
    EXPECT: <IS_NOT_MATCH>

  - NAME: kind match for multi-kind context
    CONTEXT: { kind: "multi", user: { key: "a" }, cat: { key: "b" } }
    CLAUSE: { attribute: "kind", op: "in", values: ["user"] }
    EXPECT: <IS_MATCH>

  - NAME: kind non-match for multi-kind context
    CONTEXT: { kind: "multi", user: { key: "a" }, cat: { key: "b" } }
    CLAUSE: { attribute: "kind", op: "in", values: ["dog"] }
    EXPECT: <IS_NOT_MATCH>

  - NAME: negated kind match for single-kind context
    CONTEXT: { kind: "user", key: "a" }
    CLAUSE: { attribute: "kind", op: "in", values: ["cat"], negate: true }
    EXPECT: <IS_MATCH>

  - NAME: negated kind non-match for multi-kind context
    CONTEXT: { kind: "multi", dog: { key: "b" } }
    CLAUSE: { attribute: "kind", op: "in", values: ["dog"], negate: true }
    EXPECT: <IS_NOT_MATCH>

sdkData:
  flags:
    test-flag:
      on: true
      fallthrough: { variation: 1 }
      variations: [ true, false ]
      rules:
        - id: ruleid
          variation: 0
          clauses: [ <CLAUSE> ]

evaluations:
  - name: <NAME>
    flagKey: test-flag
    context: <CONTEXT>
    default: false
    expect: <EXPECT>
