---
name: operators - string

constants:
  IS_MATCH:
    value: true
    variationIndex: 0
    reason: { kind: "RULE_MATCH", ruleIndex: 0, ruleId: "ruleid" }
  IS_NOT_MATCH:
    value: false
    variationIndex: 1
    reason: { kind: "FALLTHROUGH" }

parameters:
  - OP: startsWith
    USER_VALUE: prefix
    CLAUSE_VALUE: prefix
    EXPECT: <IS_MATCH>
  - OP: startsWith
    USER_VALUE: prefixabc
    CLAUSE_VALUE: prefix
    EXPECT: <IS_MATCH>
  - OP: startsWith
    USER_VALUE: notprefix
    CLAUSE_VALUE: prefix
    EXPECT: <IS_NOT_MATCH>
  - OP: startsWith
    USER_VALUE: Prefixabc  # case-sensitive
    CLAUSE_VALUE: prefix
    EXPECT: <IS_NOT_MATCH>

  - OP: endsWith
    USER_VALUE: suffix
    CLAUSE_VALUE: suffix
    EXPECT: <IS_MATCH>
  - OP: endsWith
    USER_VALUE: abcsuffix
    CLAUSE_VALUE: suffix
    EXPECT: <IS_MATCH>
  - OP: endsWith
    USER_VALUE: suffixno
    CLAUSE_VALUE: suffix
    EXPECT: <IS_NOT_MATCH>
  - OP: endsWith
    USER_VALUE: abcSuffix  # case-sensitive
    CLAUSE_VALUE: suffix
    EXPECT: <IS_NOT_MATCH>

  - OP: contains
    USER_VALUE: substring
    CLAUSE_VALUE: substring
    EXPECT: <IS_MATCH>
  - OP: contains
    USER_VALUE: abcsubstringxyz
    CLAUSE_VALUE: substring
    EXPECT: <IS_MATCH>
  - OP: contains
    USER_VALUE: abcsubstxyz
    CLAUSE_VALUE: substring
    EXPECT: <IS_NOT_MATCH>
  - OP: contains
    USER_VALUE: abcSubstringxyz  # case-sensitive
    CLAUSE_VALUE: substring
    EXPECT: <IS_NOT_MATCH>

  - OP: matches
    USER_VALUE: matchThisName
    CLAUSE_VALUE: "^[A-Za-z]+"
    EXPECT: <IS_MATCH>
  - OP: matches
    USER_VALUE: "_Don't match This Name"
    CLAUSE_VALUE: "^[A-Za-z]+"
    EXPECT: <IS_NOT_MATCH>

  # Wrong types:
  - OP: startsWith
    USER_VALUE: true
    CLAUSE_VALUE: "true"
    EXPECT: <IS_NOT_MATCH>
  - OP: endsWith
    USER_VALUE: true
    CLAUSE_VALUE: "true"
    EXPECT: <IS_NOT_MATCH>
  - OP: contains
    USER_VALUE: true
    CLAUSE_VALUE: "true"
    EXPECT: <IS_NOT_MATCH>
  - OP: matches
    USER_VALUE: true
    CLAUSE_VALUE: "true"
    EXPECT: <IS_NOT_MATCH>
  - OP: startsWith
    USER_VALUE: 99
    CLAUSE_VALUE: "99"
    EXPECT: <IS_NOT_MATCH>
  - OP: endsWith
    USER_VALUE: 99
    CLAUSE_VALUE: "99"
    EXPECT: <IS_NOT_MATCH>
  - OP: contains
    USER_VALUE: 99
    CLAUSE_VALUE: "99"
    EXPECT: <IS_NOT_MATCH>
  - OP: matches
    USER_VALUE: 99
    CLAUSE_VALUE: "99"
    EXPECT: <IS_NOT_MATCH>
  - OP: startsWith
    USER_VALUE: null
    CLAUSE_VALUE: "null"
    EXPECT: <IS_NOT_MATCH>
  - OP: endsWith
    USER_VALUE: null
    CLAUSE_VALUE: "null"
    EXPECT: <IS_NOT_MATCH>
  - OP: contains
    USER_VALUE: null
    CLAUSE_VALUE: "null"
    EXPECT: <IS_NOT_MATCH>
  - OP: matches
    USER_VALUE: null
    CLAUSE_VALUE: "null"
    EXPECT: <IS_NOT_MATCH>

sdkData:
  flags:
    test-string:
      on: true
      fallthrough: { variation: 1 }
      variations: [ true, false ]
      rules:
        - id: ruleid
          variation: 0
          clauses:
            - { attribute: attrname, op: <OP>, values: [ "<CLAUSE_VALUE>" ] }

evaluations:
  - name: "<USER_VALUE> <OP> <CLAUSE_VALUE>"
    flagKey: test-string
    context: { key: "user-key", custom: { attrname: "<USER_VALUE>" } }
    default: false
    expect: <EXPECT>

  - name: "[<USER_VALUE>] <OP> <CLAUSE_VALUE>"
    flagKey: test-string
    context: { key: "user-key", custom: { attrname: ["<USER_VALUE>"] } }
    default: false
    expect: <EXPECT>
