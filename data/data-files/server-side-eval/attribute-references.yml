---
name: attribute references

constants:
  IS_MATCH:
    value: true
    variationIndex: 0
    reason: { kind: "RULE_MATCH", ruleIndex: 0, ruleId: "ruleid" }
  IS_NOT_MATCH:
    value: false
    variationIndex: 1
    reason: { kind: "FALLTHROUGH" }

parameters:
  - NAME: top-level attribute with no slash prefix
    CONTEXT: { kind: "user", key: "x", attr1: "right"}
    CLAUSE: { contextKind: "user", attribute: "attr1", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: top-level attribute with slash prefix
    CONTEXT: { kind: "user", key: "x", attr1: "right"}
    CLAUSE: { contextKind: "user", attribute: "/attr1", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: top-level attribute name containing unescaped slash
    CONTEXT: { kind: "user", key: "x", "attr/a": "right"}
    CLAUSE: { contextKind: "user", attribute: "attr/a", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: top-level attribute with slash prefix containing escaped slash
    CONTEXT: { kind: "user", key: "x", "attr/a": "right"}
    CLAUSE: { contextKind: "user", attribute: "/attr~1a", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: top-level attribute name containing unescaped tilde
    CONTEXT: { kind: "user", key: "x", "attr~a": "right"}
    CLAUSE: { contextKind: "user", attribute: "attr~a", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: top-level attribute with slash prefix containing escaped tilde
    CONTEXT: { kind: "user", key: "x", "attr~a": "right"}
    CLAUSE: { contextKind: "user", attribute: "/attr~0a", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: attribute is interpreted as unescaped name if there is no contextKind
    CONTEXT: { kind: "user", key: "x", "/attr/a": "right"}
    CLAUSE: { attribute: "/attr/a", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: property in object
    CONTEXT: { kind: "user", key: "x", attr1: {prop1: "right", prop2: "wrong"}}
    CLAUSE: { contextKind: "user", attribute: "/attr1/prop1", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: property with escape sequence in object
    CONTEXT: { kind: "user", key: "x", attr1: {"prop/a": "right", prop2: "wrong"}}
    CLAUSE: { contextKind: "user", attribute: "/attr1/prop~1a", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: property in nested object
    CONTEXT: { kind: "user", key: "x", attr1: {prop1: {prop2: "right"}, prop2: "wrong"}}
    CLAUSE: { contextKind: "user", attribute: "/attr1/prop1/prop2", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>

  - NAME: property that is a numeric string
    CONTEXT: { kind: "user", key: "x", attr1: {"2": "right"}}
    CLAUSE: { contextKind: "user", attribute: "/attr1/2", op: "in", values: ["right"] }
    EXPECT: <IS_MATCH>
  
  - NAME: nonexistent property automatically fails clause
    CONTEXT: { kind: "user", key: "x", attr1: {prop1: "right", prop2: "wrong"}}
    CLAUSE: { contextKind: "user", attribute: "/attr1/prop99", op: "in", values: ["x"], negate: true }
    # note that "not in [x]" does *not* match if the context value does not exist
    EXPECT: <IS_NOT_MATCH>

  - NAME: property reference in non-object automatically fails clause
    CONTEXT: { kind: "user", key: "x", attr1: "right"}
    CLAUSE: { contextKind: "user", attribute: "/attr1/prop1", op: "in", values: ["x"], negate: true }
    # note that "not in [x]" does *not* match if the context value does not exist
    EXPECT: <IS_NOT_MATCH>

  - NAME: array index is not supported
    CONTEXT: { kind: "user", key: "x", attr1: ["wrong", "alas", "x"]}
    CLAUSE: { contextKind: "user", attribute: "/attr1/2", op: "in", values: ["x"] }
    EXPECT: <IS_NOT_MATCH>

sdkData:
  flags:
    test-flag:
      on: true
      fallthrough: { variation: 1 }
      variations: [ true, false ]
      rules:
        - id: ruleid
          variation: 0
          clauses: [ <CLAUSE> ]

evaluations:
  - name: <NAME>
    flagKey: test-flag
    context: <CONTEXT>
    default: false
    expect: <EXPECT>
