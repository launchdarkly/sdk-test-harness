---
name: target match (<TYPE_NAME>)

constants:
  USER: { key: "user-key" }

parameters:
  - TYPE_NAME: bool
    TYPE_VALUE_OFF: false
    TYPE_VALUE_FALLTHROUGH: false
    TYPE_VALUE_1: true
    TYPE_VALUE_2: false
    TYPE_DEFAULT: false

  - TYPE_NAME: int
    TYPE_VALUE_OFF: -100
    TYPE_VALUE_FALLTHROUGH: -101
    TYPE_VALUE_1: 1
    TYPE_VALUE_2: 2
    TYPE_DEFAULT: -1

  - TYPE_NAME: double
    TYPE_VALUE_OFF: -100
    TYPE_VALUE_FALLTHROUGH: -101
    TYPE_VALUE_1: 1.5
    TYPE_VALUE_2: 2.5
    TYPE_DEFAULT: 0.5

  - TYPE_NAME: string
    TYPE_VALUE_OFF: "off"
    TYPE_VALUE_FALLTHROUGH: "fall"
    TYPE_VALUE_1: "a"
    TYPE_VALUE_2: "b"
    TYPE_DEFAULT: "default"

  - TYPE_NAME: any
    TYPE_VALUE_OFF: "off"
    TYPE_VALUE_FALLTHROUGH: "fall"
    TYPE_VALUE_1: 3
    TYPE_VALUE_2: "b"
    TYPE_DEFAULT: false

sdkData:
  flags:
    flag-with-targets:
      on: true
      variations: [ <TYPE_VALUE_OFF>, <TYPE_VALUE_FALLTHROUGH>, <TYPE_VALUE_1>, <TYPE_VALUE_2> ]
      offVariation: 0
      fallthrough: { variation: 1 }
      targets:
        - { "variation": 2, "values": [ "user1", "user2" ] }
        - { "variation": 3, "values": [ "user3", "user4" ] }

    off-flag-with-targets:
      on: false
      variations: [ <TYPE_VALUE_OFF>, <TYPE_VALUE_FALLTHROUGH>, <TYPE_VALUE_1>, <TYPE_VALUE_2> ]
      offVariation: 0
      fallthrough: { variation: 1 }
      targets:
        - { "variation": 2, "values": [ "user1", "user2" ] }
        - { "variation": 3, "values": [ "user3", "user4" ] }

    flag-targets-match-before-rules:
      on: true
      variations: [ <TYPE_VALUE_OFF>, <TYPE_VALUE_FALLTHROUGH>, <TYPE_VALUE_1>, <TYPE_VALUE_2> ]
      offVariation: 0
      fallthrough: { variation: 1 }
      targets:
        - { variation: 2, values: [ "key1" ] }
      rules:
        - id: rule1
          variation: 3
          clauses:
            - { "attribute": "key", "op": "in", "values": [ "key1" ] }

evaluations:
  - name: user1 matches
    flagKey: flag-with-targets
    user: { "key": "user1" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_1>
      variationIndex: 2
      reason: { "kind": "TARGET_MATCH" }

  - name: user2 matches
    flagKey: flag-with-targets
    user: { "key": "user2" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_1>
      variationIndex: 2
      reason: { "kind": "TARGET_MATCH" }

  - name: user3 matches
    flagKey: flag-with-targets
    user: { "key": "user3" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_2>
      variationIndex: 3
      reason: { "kind": "TARGET_MATCH" }

  - name: user4 matches
    flagKey: flag-with-targets
    user: { "key": "user4" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_2>
      variationIndex: 3
      reason: { "kind": "TARGET_MATCH" }

  - name: fallthrough for non-match
    flagKey: flag-with-targets
    user: { "key": "user99" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_FALLTHROUGH>
      variationIndex: 1
      reason: { "kind": "FALLTHROUGH" }

  - name: targets are ignored when flag is off
    flagKey: off-flag-with-targets
    user: { "key": "user1" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_OFF>
      variationIndex: 0
      reason: { "kind": "OFF" }

  - name: target matching takes precedence over rules
    flagKey: flag-targets-match-before-rules
    user: { "key": "key1" }
    valueType: <TYPE_NAME>
    default: <TYPE_DEFAULT>
    expect:
      value: <TYPE_VALUE_1>
      variationIndex: 2
      reason: { "kind": "TARGET_MATCH" }
