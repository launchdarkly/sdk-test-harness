---
name: segment match

constants:
  IS_MATCH:
    value: true
    variationIndex: 0
    reason: { kind: "RULE_MATCH", ruleIndex: 0, ruleId: "ruleid" }
  IS_NOT_MATCH:
    value: false
    variationIndex: 1
    reason: { kind: "FALLTHROUGH" }
  boolean_flag_base: &boolean_flag_base
    on: true
    variations: [ true, false ]
    offVariation: 1
    fallthrough: { variation: 1 }

sdkData:
  flags:
    flag-using-segment1:
      <<: *boolean_flag_base
      rules:
        - id: ruleid
          variation: 0
          clauses:
            - { attribute: "", op: "segmentMatch", values: [ "segment1" ]}

    flag-using-segment1-and-segment2:
      <<: *boolean_flag_base
      rules:
        - id: ruleid
          variation: 0
          clauses:
            - { attribute: "", op: "segmentMatch", values: [ "segment1", "segment2" ]}

    flag-using-unknown-segment:
      <<: *boolean_flag_base
      rules:
        - id: ruleid
          variation: 0
          clauses:
            - { attribute: "", op: "segmentMatch", values: [ "segment99" ]}

    flag-using-segment3:
      <<: *boolean_flag_base
      rules:
        - id: ruleid
          variation: 0
          clauses:
            - { attribute: "", op: "segmentMatch", values: [ "segment3" ]}

  segments:
    segment1:
      included: [ "user-included-in-segment" ]
      excluded: [ "user-excluded-from-segment" ]
      rules:
        - clauses:
            - { attribute: "segment1RuleShouldMatch", op: "in", values: [ true ] }

    segment2:
      rules:
        - clauses:
            - { attribute: "segment2RuleShouldMatch", op: "in", values: [ true ] }

    segment3:
      salt: salty
      rules:
        - id: ruleid
          clauses:
            - { attribute: "segment3RuleShouldMatch", op: "in", values: [ true ] }
          #Bucket value for segment3.salty.user-key + 5
          #The value will be 36563 for segment3.salty.unmatching-key
          weight: 14955

evaluations:
  - name: user matches via include
    flagKey: flag-using-segment1
    user:
      key: "user-included-in-segment"
    expect: <IS_MATCH>

  - name: user matches via rule
    flagKey: flag-using-segment1
    user:
      key: "some-user"
      custom: { "segment1RuleShouldMatch": true }
    expect: <IS_MATCH>

  - name: user matches via rule but is excluded
    flagKey: flag-using-segment1
    user:
      key: "user-excluded-from-segment"
      custom: { "segment1RuleShouldMatch": true }
    expect: <IS_NOT_MATCH>

  - name: user does not match and is not included
    flagKey: flag-using-segment1
    user:
      key: "some-user"
    expect: <IS_NOT_MATCH>

  - name: clause matches if any of the segments match
    flagKey: flag-using-segment1-and-segment2
    user:
      key: "user-key"
      custom: { "segment2RuleShouldMatch": true }
    expect: <IS_MATCH>

  - name: unknown segment is non-match, not an error
    flagKey: flag-using-unknown-segment
    user:
      key: "user-key"
    expect: <IS_NOT_MATCH>

  - name: key does not bucket into segment
    flagKey: flag-using-segment3
    user:
      key: "unmatching-key"
      custom: { "segment3RuleShouldMatch": true }
    expect: <IS_NOT_MATCH>

  - name: key does bucket into segment
    flagKey: flag-using-segment3
    user:
      key: "user-key"
      custom: { "segment3RuleShouldMatch": true }
    expect: <IS_MATCH>
